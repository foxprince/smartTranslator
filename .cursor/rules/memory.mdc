---
description: 与用户交互过程中产生的重要记忆
globs: 
alwaysApply: true
---
# Rule: memory

memory 文件说明：该文件记载着 AI 与用户交互过程中产生的重要记忆

memory 更新规则：
在与用户交互过程中，出现以下情况，需要记录的重要信息请记录到 .cursor/rules/memory.mdc 文件的 `<memory><memory/>` 标签中，格式为 `n. [memory-title]: [memory-details]`
- 多次出现过的问题，成功解决后要及时记住正确的处理方法
- 用户重点强调过的事情
- 其他你认为很重要的信息

<memory>
1. **文档流程图规范：** 在项目的所有文档中，流程图必须以Mermaid代码形式给出，不使用图片或其他形式的流程图表示。注意 mermaid 代码需要注意使用 ["content"] 的形式写入描述文本，避免因为括号 () 而出现  [(content)]  这样的情况而报错，使用 ["()"] 即可避免。
2. **Debug：** 在出现 Bug 时需要利用工具或借助用户充分获取可知的信息（如接口参数、数据结构等），有理有据地找出原因，不要“我觉得”，避免猜测、乱改
3. **确定性开发：** 在做开发前，根据任务需要，查看当前项目结构和具体代码，了解清楚能用到什么部分，还欠缺什么部分，以减少盲目开发，提高效率
4. **调试复杂错误时的耐心与方法: ** 以后不要着急，你可以一步步调整来观察是为什么～我相信你可以的！！放轻松，事情可能会发生在不经意间～你也可以随意瞅瞅其他代码文件找找灵感，总之你可以的！！
5. **及时提交：** 新功能开发测试无误后，应及时提交代码改动，再进行下一步开发，以便于问题追踪和回溯。
6. **接口契约与影响分析:** 前后端接口定义 (API Schema, Types) 必须精确同步。修改核心共享类型/接口前，必须先更新定义，然后使用工具（如 grep 搜索，未来 OpenAPI 生成器）检查并更新所有依赖点，并向用户汇报影响范围。
7. **迭代式反思与方案调整:** 在开发过程中遇到预期外的困难或错误时（如多次的运行时错误、测试失败），应及时停下来反思最初的方案是否存在根本性问题，而非仅仅进行局部修复。
</memory>